# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    app.version: '0.31.0'

    app.warning: '%env(resolve:APP_SHOW_WARNING)%'
    api_app: '%env(resolve:API_APP)%'
    api_navire: '%env(resolve:API_NAVIRE)%'
    api_natinf: '%env(resolve:API_NATINF)%'
    metabase_root: '%env(resolve:METABASE_LINK)%'
    metabase_url: '%env(resolve:METABASE)%'
    metabase_key: '%env(resolve:METABASE_KEY)%'
    metabase_dashboard: '%env(resolve:METABASE_DASHBOARD)%'

services:
    twig.extension.intl:
        class: Twig\Extensions\IntlExtension
        tags:
            - { name: twig.extension }

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    Gedmo\Blameable\BlameableListener:
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\NatinfFiller:
        arguments:
            $api: '%api_natinf%'

    App\Service\ExportService:
        arguments:
            $project_dir: '%kernel.project_dir%'

    App\Service\PublicAPI\ExportOdtService:
      arguments:
        $project_dir: '%kernel.project_dir%'

    App\Service\PAM\ExportService:
        arguments:
            $project_dir: '%kernel.project_dir%'

    # Explicit wiring for forms with event listeners
    App\Form\ControleNavireType:
        arguments: ['@App\Form\EventListener\ResetNatinfDataListener']

    App\Form\ControleEtablissementType:
        arguments: ['@App\Form\EventListener\ResetNatinfDataListener']

    App\Form\ControlePecheurPiedType:
        arguments: ['@App\Form\EventListener\ResetNatinfDataListener']

    App\Form\ControleLoisirType:
        arguments: ['@App\Form\EventListener\ResetNatinfDataListener']


    # SonataAdminBundle related services
    admin.navire:
        class: App\Admin\NavireAdmin
        arguments: [~, App\Entity\Navire, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Navires" }
    admin.rapport:
        class: App\Admin\RapportAdmin
        arguments: [~, App\Entity\Rapport, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Rapports" }
    admin.etablissement:
        class: App\Admin\EtablissementAdmin
        arguments: [~, App\Entity\Etablissement, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Établissements" }
    admin.moyen:
        class: App\Admin\MoyenAdmin
        arguments: [~, App\Entity\Moyen, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: services, label: "Moyens par unité" }
    admin.zone_geographique:
        class: App\Admin\ZoneGeographiqueAdmin
        arguments: [~, App\Entity\ZoneGeographique, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: services, label: "Zones Géographiques" }
    admin.agent:
        class: App\Admin\AgentAdmin
        arguments: [~, App\Entity\Agent, App\Controller\Admin\AgentCRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: services, label: Agent }

    admin.service_interministeriel:
        class: App\Admin\ServiceInterministerielAdmin
        arguments: [~, App\Entity\ServiceInterministeriel, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Autres services interministériels" }

    admin.categorie_etablissement:
        class: App\Admin\CategorieEtablissementAdmin
        arguments: [~, App\Entity\CategorieEtablissement, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories d'établissements" }

    admin.categorie_controle_autre:
        class: App\Admin\CategorieControleAutreAdmin
        arguments: [~, App\Entity\CategorieControleAutre, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories d'autres contrôles" }

    admin.categorie_tache:
        class: App\Admin\CategorieTacheAdmin
        arguments: [~, App\Entity\Tache, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de tâches administratives" }

    admin.categorie_usage_navire:
        class: App\Admin\CategorieUsageNavireAdmin
        arguments: [~, App\Entity\CategorieUsageNavire, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories d'usage des navires" }

    admin.categorie_controle_navire:
        class: App\Admin\CategorieControleNavireAdmin
        arguments: [~, App\Entity\CategorieControleNavire, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de contrôles réalisables sur un navires" }

    admin.categorie_loisir:
        class: App\Admin\CategorieLoisirAdmin
        arguments: [~, App\Entity\Loisir, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de loisirs" }

    admin.categorie_moyen:
        class: App\Admin\CategorieMoyenAdmin
        arguments: [~,App\Entity\CategorieMoyen,~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de moyen nautique" }

    admin.categorie_armement:
        class: App\Admin\CategorieControleArmementAdmin
        arguments: [ ~,App\Entity\CategorieControleArmement,~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de contrôle (armement)" }

    admin.categorie_personnel:
        class: App\Admin\CategorieControlePersonnelAdmin
        arguments: [ ~,App\Entity\CategorieControlePersonnel,~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de contrôle (personnel)" }

    admin.categorie_methode_ciblage:
        class: App\Admin\CategorieMethodeCiblage
        arguments: [~,App\Entity\CategorieMethodeCiblage,~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de méthodes de ciblage" }

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, App\Controller\Admin\UserCRUDController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: User }
        public: true

    admin.service:
        class: App\Admin\ServiceAdmin
        arguments: [~, App\Entity\Service, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: services, label: Services }
        public: true

    admin.mois_clos:
        class: App\Admin\MoisClosAdmin
        arguments: [~, App\Entity\MoisClos, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Mois clôturés" }
        public: true

    admin.natinf:
        class: App\Admin\NatinfAdmin
        arguments: [~, App\Entity\Natinf, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: Natinf }
        public: true

    admin.category_pam_controle:
        class: App\Admin\CategoryPamControleAdmin
        arguments: [~, App\Entity\PAM\CategoryPamControle, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de contrôles PAM" }
        public: true

    admin.category_pam_indicateur:
        class: App\Admin\CategoryPamIndicateurAdmin
        arguments: [~, App\Entity\PAM\CategoryPamIndicateur, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories d'indicateurs PAM" }
        public: true

    admin.category_pam_mission:
        class: App\Admin\CategoryPamMissionAdmin
        arguments: [~, App\Entity\PAM\CategoryPamMission, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: "Catégories de missions PAM" }
        public: true

    admin.pam_rapport:
        class: App\Admin\PamRapportAdmin
        arguments: [~, App\Entity\PAM\PamRapport, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Rapports PAM" }
        public: true

    admin.pam_rapport_brouillon:
        class: App\Admin\PamRapportBrouillonAdmin
        arguments: [~, App\Entity\PAM\PamDraft, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: "Rapports PAM brouillon" }
        public: true


    admin.fonction_agent:
        class: App\Admin\FonctionAgentAdmin
        arguments: [~, App\Entity\FonctionAgent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: FonctionAgent }
        public: true

    admin.fonction_particuliere_agent:
        class: App\Admin\FonctionParticuliereAgentAdmin
        arguments: [~, App\Entity\FonctionParticuliereAgent, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: FonctionParticuliereAgent }
        public: true

    admin.categorie_deroutement:
        class: App\Admin\CategorieDeroutementAdmin
        arguments: [ ~, App\Entity\CategorieDeroutement, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: categorie, label: 'Catégorie de déroutement' }
        public: true

    admin.contact:
        class: App\Admin\ContactAdmin
        arguments: [ ~, App\Entity\Contact, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Contact }
        public: true

    admin.documentation:
        class: App\Admin\DocumentationAdmin
        arguments: [ ~, App\Entity\Documentation, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Documentation }
        public: true

    admin.commandant:
        class: App\Admin\CommandantAdmin
        arguments: [ ~, App\Entity\Commandant, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Commandant }
        public: true

    admin.navpro_lot:
        class: App\Admin\NavProLotAdmin
        arguments: [ ~, App\Entity\NavPro\ControleLot, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: 'Contrôles NavPro par Lot' }
        public: true

    admin.navpro_unitaire:
        class: App\Admin\NavProUnitaireAdmin
        arguments: [ ~, App\Entity\NavPro\ControleUnitaire, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: rapport, label: 'Contrôles NavPro unitaire' }
        public: true

    admin.pam_planning:
        class: App\Admin\PamPlanningAdmin
        arguments: [ ~, App\Entity\PAM\PamPlanning, ~ ]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: 'Planning PAM' }

        public: true
